<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!--
        targetRuntime="MyBatis3Simple":生成简单版的CRUD
        MyBatis3:豪华版
     -->
    <context id="DB2Tables" targetRuntime="MyBatis3Simple">
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <!--自动实现Serializable接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
        <!-- 去除自动生成的注释 true:取消生成注释,false:生成注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <!--<jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
                        connectionURL="jdbc:oracle:thin:@localhost:1521:orcl"
                        userId="scott"
                        password="tiger">
        </jdbcConnection>-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/tool"
                        userId="root"
                        password="root">
        </jdbcConnection>
        <!--
        java类型处理器,用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl,
         false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
         true时把JDBC DECIMAL 和NUMERIC 类型解析为java.math.BigDecimal
        -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--
        javaModelGenerator：指定javaBean的生成策略
        targetPackage="test.model"：包名
        targetProject="\MBGTestProject\src"：目标工程
        -->
        <javaModelGenerator targetPackage="com.origin.tool.entity" targetProject=".\src\main\java">

            <!--
            setter 赋值时是否进行清理前后空格和null判断,例如
            public void setModel(String model) {
                this.model = model == null ? null : model.trim();
            }
            -->
            <property name="trimStrings" value="true"/>
            <!--
            true:生成一个无参构造器,一个全参构造器,
            false:不生成构造器
            -->
            <property name="constructorBased" value="true"/>
            <!--true:不生成setter,默认为false-->
            <property name="immutable" value="false"/>
            <!--继承指定BasicEntity类,并导入com.origin.tool.entity包-->
            <property name="rootClass" value="com.origin.tool.entity.BasicEntity"/>
        </javaModelGenerator>

        <!-- sqlMapGenerator：sql映射生成策略： -->
        <sqlMapGenerator targetPackage="com.origin.tool.mapper"
                         targetProject=".\src\main\resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--
        生成Mapper接口，如果没有配置该元素，那么默认不会生成Mapper接口
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
           1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation（SQL生成在annotation中），不会生成对应的XML；
           2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
           3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
   -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.origin.tool.mapper" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="true"/>
            <!--可以为所有生成的接口添加一个父类，MBG只负责生成，不负责检查-->
            <property name="rootInterface" value="com.origin.tool.mapper.BasicMapper"/>
        </javaClientGenerator>
        <!-- 指定要逆向分析哪些表：根据表要创建javaBean -->
        <table tableName="model" domainObjectName="Model">
            <!--有些表的字段需要指定java类型-->
            <!--<columnOverride column="" javaType="" />-->
            <columnOverride column="DATE_FIELD" property="startDate" />
            <!--生成时忽略指定列-->
            <!--<ignoreColumn column="id"/>-->
            <!--
            generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
             -->
            <!--<generatedKey column="id" sqlStatement="DB2" identity="true" />-->
            <!--
            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
            如果使用了columnOverride元素，该属性无效；
            -->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->

        </table>

    </context>
</generatorConfiguration>
