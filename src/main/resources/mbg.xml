<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!--
        targetRuntime="MyBatis3Simple":生成简单版的CRUD
        MyBatis3:豪华版
     -->
    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--实现Serializable接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
        <!--生成toString方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin>
        <!-- 去除自动生成的注释 true:取消生成注释,false:生成注释 -->
        <!--<commentGenerator>
            <property name="suppressAllComments" value="false"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>-->
        <!-- 自定义注释生成器 -->
        <commentGenerator type="com.origin.other.MySQLCommentGenerator">
            <property name="author" value="lixiewen"/>
            <property name="dateFormat" value="yyyy-MM-dd"/>
        </commentGenerator>
        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <!--<jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
                        connectionURL="jdbc:oracle:thin:@localhost:1521:orcl"
                        userId="scott"
                        password="tiger">
        </jdbcConnection>-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/scott"
                        userId="root"
                        password="root">
            <!-- 设置 useInformationSchema 属性为 true就可以读取表的注释了 -->
            <property name="useInformationSchema" value="true" />
        </jdbcConnection>
        <!-- 是否把JDBC DECIMAL 和NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--
            javaModelGenerator：指定javaBean的生成策略
            targetPackage="test.model"：包名
            targetProject="\MBGTestProject\src"：目标工程
        -->
        <javaModelGenerator targetPackage="com.origin.tool.entity" targetProject=".\src\main\java">
            <!-- setter 赋值时是否进行清理前后空格和null判断,例如 -->
            <property name="trimStrings" value="true"/>
            <!--继承指定BasicEntity类,并导入com.origin.tool.entity包-->
            <property name="rootClass" value="com.origin.tool.core.BasicEntity"/>
        </javaModelGenerator>

        <!-- sqlMapGenerator：sql映射生成策略： -->
        <sqlMapGenerator targetPackage="com.origin.tool.mapper" targetProject=".\src\main\resources">
        </sqlMapGenerator>

        <javaClientGenerator type="XMLMAPPER" targetPackage="com.origin.tool.mapper" targetProject=".\src\main\java">
            <!--可以为所有生成的接口添加一个父类，MBG只负责生成，不负责检查-->
            <property name="rootInterface" value="com.origin.tool.core.BasicMapper"/>
        </javaClientGenerator>
        <!-- 指定要逆向分析哪些表：根据表要创建javaBean -->
        <table tableName="emp" domainObjectName="Emp"></table>

    </context>
</generatorConfiguration>
